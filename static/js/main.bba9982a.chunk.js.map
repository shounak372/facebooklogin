{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","q_timer","questions","questionText","answerOptions","answerText","isCorrect","useState","currentQuestion","setCurrentQuestion","currentScore","setScore","currentOption","setCurrentOption","seconds","setSeconds","answers","setAnswers","handleSubmitClick","answersCopy","nextQuestion","length","clearTimeout","useEffect","setTimeout","className","map","answerOption","index","type","name","value","onChange","checked","onClick","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bba9982a.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from 'react';\n\nfunction App() {\n  // Store questions\n  const questions = [\n\t\t{\n\t\t\tquestionText: 'What is the capital of Germany?',\n\t\t\tanswerOptions: [\n\t\t\t\t{ answerText: 'Frankfurt', isCorrect: false },\n\t\t\t\t{ answerText: 'Stuttgart', isCorrect: false },\n\t\t\t\t{ answerText: 'Paris', isCorrect: false },\n\t\t\t\t{ answerText: 'Berlin', isCorrect: true },\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tquestionText: 'What is the capital of Pakistan?',\n\t\t\tanswerOptions: [\n\t\t\t\t{ answerText: 'Islamabad', isCorrect: true },\n\t\t\t\t{ answerText: 'Karachi', isCorrect: false },\n\t\t\t\t{ answerText: 'Hyderabad', isCorrect: false },\n\t\t\t\t{ answerText: 'New Delhi', isCorrect: false },\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tquestionText: 'What is the capital of Canada?',\n\t\t\tanswerOptions: [\n\t\t\t\t{ answerText: 'Toronto', isCorrect: false },\n\t\t\t\t{ answerText: 'Ottawa', isCorrect: true },\n\t\t\t\t{ answerText: 'Vancouver', isCorrect: false },\n\t\t\t\t{ answerText: 'New York', isCorrect: false },\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tquestionText: 'What is the capital of New Zealand?',\n\t\t\tanswerOptions: [\n\t\t\t\t{ answerText: 'Auckland', isCorrect: false },\n\t\t\t\t{ answerText: 'Christchurch', isCorrect: false },\n\t\t\t\t{ answerText: 'Wellington', isCorrect: true },\n\t\t\t\t{ answerText: 'Sydney', isCorrect: false },\n\t\t\t],\n\t\t},\n\t];\n\n  //Track current question\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  //Track score\n  const [currentScore, setScore] = useState(0);\n  //Track option  \n  const [currentOption, setCurrentOption] = useState('');\n  //Track Time\n  const [seconds, setSeconds] = useState(20);\n\n  //Track Answers\n  const [answers, setAnswers] = useState(['N/A', 'N/A', 'N/A', 'N/A'])\n\n  //Event handler for next question\n  const handleSubmitClick = () => {\n    if(currentOption && currentOption.isCorrect){\n      setScore(currentScore+1);\n      let answersCopy = [...answers];\n      answersCopy[currentQuestion] = 'Right';\n      setAnswers(answersCopy);\n    }\n    else if(currentOption){\n      let answersCopy = [...answers];\n      answersCopy[currentQuestion] = 'Wrong';\n      setAnswers(answersCopy);\n    }\n    const nextQuestion = currentQuestion + 1;\n    setCurrentQuestion(nextQuestion);\n    setCurrentOption('');\n    if(nextQuestion < questions.length){\n      setSeconds(20);\n      clearTimeout(q_timer);\n    }\n  }\n\n  //Handle option change\n  const handleOptionChange = (option) => {\n    // console.log(option)\n    // console.log(option.target.value);\n    setCurrentOption(option);\n  }\n\n  //Handle skip \n  const handleSkip = () => {\n    const nextQuestion = currentQuestion + 1;\n    setCurrentQuestion(nextQuestion);\n    setCurrentOption('');\n    if(nextQuestion < questions.length){\n      setSeconds(20);\n      clearTimeout(q_timer);\n    }\n      \n  }\n  //Timer hook\n  var q_timer;\n  useEffect(() => {\n    if (seconds >= 0) {\n      q_timer = setTimeout(() => setSeconds(seconds - 1), 1000);\n      // console.log(seconds)\n    } else {\n      if(currentQuestion >= 4){\n        clearTimeout(q_timer);\n      }\n      else{\n        setSeconds(20);\n        handleSubmitClick();\n      }\n      \n    }\n  });\n\n  return (\n    <>\n      <div className='app'>\n        {currentQuestion >= questions.length ? (\n          <div className='score-section'>You scored {currentScore} out of {questions.length}</div>\n        ) : (\n          <>\n            <div className='question-section'>\n              <div className='question-count'>\n                <span>Question {currentQuestion+1} </span>/{questions.length}\n              </div>\n              <div className='question-text'>{questions[currentQuestion].questionText}</div>\n              <div className='timer-text'>Time Left: {seconds}</div>\n            </div>\n\n            <div className='answer-section'>\n\n              {questions[currentQuestion].answerOptions.map((answerOption, index) => (\n                <div>\n                  <input\n                    type=\"radio\"\n                    name=\"answer-radio\"\n                    value={answerOption.answerText}\n                    onChange ={() => handleOptionChange(answerOption)}\n                    checked={currentOption.answerText == answerOption.answerText}\n                  />\n                  <label>{answerOption.answerText}</label>\n                \n          \n                  \n                </div>\n              ))}\n              <button onClick={handleSubmitClick} disabled={!currentOption}>Submit</button>\n              <button onClick={handleSkip}>Skip</button>\n            </div>\n\n\n          </>\n        )}\n        \n      </div>\n      <div className=\"response-table\">\n        <table>\n          <tr>\n            <th>Q1</th>\n            <th>Q2</th>\n            <th>Q3</th>\n            <th>Q4</th>\n          </tr>\n          <tr>\n            <td>{answers[0]}</td>\n            <td>{answers[1]}</td>\n            <td>{answers[2]}</td>\n            <td>{answers[3]}</td>\n          </tr>\n        </table>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}